import groovy.json.JsonSlurper

buildscript {
    dependencies {
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4"
    }
}
plugins {
    id 'org.jetbrains.kotlin.multiplatform' //version '1.3.72'
    id "base"
    id "maven-publish"
}
repositories {
    jcenter()
    mavenCentral()
}

println "Initializing :StdLib:build.gradle"
task initFile{
    doFirst {
        println "Running :StdLib:build.gradle"
    }
}

def GROUP_ID= 'sidev.lib.kotlin' //'sidev.lib.kotlin.multi'
def ARTIFACT_ID= 'KtStdLib'
def PKG_REPOSITORY= 'SidevLib_Private'
def BINTRAY_ORGINIZATION= ""
def ISSUE_URL= ""
def SITE_URL= ""
def VCS_URL= "https://github.com/alfalifr/SidevLibKt/tree/master/StdLib"
def LIBRARY_VERSION_NAMES= ['0.0.1x', '0.0.1x.11112020']
def LIBRARY_VERSION_NAME= LIBRARY_VERSION_NAMES.last()

//group GROUP_ID
version LIBRARY_VERSION_NAME

//apply plugin : "maven-publish"
apply plugin: 'com.jfrog.bintray'



kotlin {
    jvm()
    js {
        browser {
        }
        nodejs {
        }
    }
    // For ARM, should be changed to iosArm32 or iosArm64
    // For Linux, should be changed to e.g. linuxX64
    // For MacOS, should be changed to e.g. macosX64
    // For Windows, should be changed to e.g. mingwX64
    //mingwX64("mingw")
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
//                implementation("org.jetbrains.kotlin:kotlin-reflect:1.4.0")
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                implementation("org.jetbrains.kotlin:kotlin-reflect:1.4.0")
                implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.2")
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }
/*
        mingwMain {
            dependencies {
                implementation("org.jetbrains.kotlin:kotlin-reflect:1.4.0")
            }
        }
        mingwTest {
        }
// */
    }
}



/*
==================
Template Task
==================
 */

afterEvaluate {
    println("afterEvaluate() ======== ")
    project.publishing.publications.all {
        // rename artifacts
        groupId = GROUP_ID

        if (it.name.contains('metadata')) {
            artifactId = "${ARTIFACT_ID.toLowerCase()}"
        } else if(it.name == "kotlinMultiplatform") {
            println("afterEvaluate() artifactId= $artifactId")
            artifactId = "${ARTIFACT_ID.toLowerCase()}-kotlin_multiplatform"
        } else {
            println("afterEvaluate() ELSE artifactId= $artifactId")
            artifactId = "${ARTIFACT_ID.toLowerCase()}-${it.name}"
        }

        pom {
            developers {
                developer {
                    id = "alfalifr"
                    name = "Aliffiro" //"Aliaksandr Rasolka"
                    email = "fathf48@gmail.com"
                }
            }
        }
/*
        for(arti in it.artifacts){
            if(arti.class.name == "org.gradle.api.publish.maven.internal.artifact.PublishArtifactBasedMavenArtifact_Decorated"
                && arti.classifier == "sources"){
                def file= (File) arti.file
                try{
                    file.writable= true
                    def pw= new PrintWriter(file)
                    pw.println("blank")
                    pw.close()
                    println "artifact $arti file is changed: file in ${file.name}"
                } catch(e){
                    println "ERROR when modifying artifact $arti file: file in ${file.name}"
                    println "  e= $e"
                }
            }
        }
 */
    }
///*
    publishing.publications.removeAll {
        println("publishing.publications.removeAll it.name= ${it.name} it.name == \"kotlinMultiplatform\" => ${it.name == "kotlinMultiplatform"}")
        it.name == "kotlinMultiplatform"
    }
// */
/*
    publishing.publications.collect {
        it.name
    }.findAll {
        it != "kotlinMultiplatform"
    }
 */
    println("afterEvaluate() ======== AKHIR publishing.publications= ${publishing.publications}")
}

def getBintrayUserProperty() {
    return hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
}

def getBintrayApiKeyProperty() {
    return hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
}

bintray {
    //A user name of bintray to A, and API key of Bintray to B.I do not want to include API Key in git,
    // so I am gradle.properties writing locally.
    // Gradle's property file is read in the order of gradle in the home directory> gradle in the project directory,
    // so if it is written in property in the home directory, it will be useful for other projects as well.
    user = getBintrayUserProperty()
    key = getBintrayApiKeyProperty()
    //f you set publish to true, the new version will be published the moment you upload to bintray. If false, it will not be published unless you press the publish button on the bintray web.
    // It is recommended that you make it false because it can prevent an accident that you accidentally release the latest version.
    publish = false

    pkg {
        repo = PKG_REPOSITORY
        name = ARTIFACT_ID
        userOrg = BINTRAY_ORGINIZATION
        licenses = ['Apache-2.0']
        vcsUrl = VCS_URL
        websiteUrl = SITE_URL
        issueTrackerUrl = ISSUE_URL

        version {
            name = LIBRARY_VERSION_NAME
            vcsTag = LIBRARY_VERSION_NAME
            released = new Date()
        }
    }
}

// This specifies the publications to upload to bintray before doing the bintrayUpload gradle task.
//In the mpp configuration of one module after 1.3,
// it is not uploaded unless you explicitly specify artifacts in publications like this.
// It is not necessary to have the findAll part,
// [project name]-kotlinMultiplatformbut a directory containing only pom files will be uploaded, so it is better to exclude it.
bintrayUpload.doFirst {
    publications = publishing.publications.collect {
        it.name
    }.findAll {
        it != "kotlinMultiplatform"
    }
/*
    project.publishing.publications.all {
        for(arti in it.artifacts){
            if(arti.class.name == "org.gradle.api.publish.maven.internal.artifact.PublishArtifactBasedMavenArtifact_Decorated"
                    && arti.classifier == "sources"){
                def file= (File) arti.file
                println "artifact $arti file is about to be changed: file in ${file.path}"
                try{
                    file.writable= true
                    def pw= new PrintWriter(file)
                    pw.println("blank")
                    pw.close()
                    println "artifact $arti file is changed: file in ${file.path}"
                } catch(e){
                    println "ERROR: when modifying artifact $arti file: file in ${file.path}"
                    println "  e= $e"
                }
            }
        }
    }
 */
}
///*
task modifySource{
    doFirst {
/*
        publishing.publications.forEach {
            (it as MavenPublication).artifacts.removeAll {
                def willBeRemoved=
                        it.class.name == "org.gradle.api.publish.maven.internal.artifact.PublishArtifactBasedMavenArtifact_Decorated" &&
                                it.classifier == "sources"
                if(willBeRemoved){
                    //def file= (File) arti.file
                    //println "artifact $arti file is about to be changed: file in ${file.path}"
                    println "artifact $it is removed"
                }
            }
        }
// */
///*
        project.publishing.publications.all {
            for(arti in it.artifacts){
                if(arti.class.name == "org.gradle.api.publish.maven.internal.artifact.PublishArtifactBasedMavenArtifact_Decorated"
                        && arti.classifier == "sources"){
                    def file= (File) arti.file
                    println "artifact $arti file is about to be changed: file in ${file.path}"
                    try{
                        file.writable= true
                        def pw= new PrintWriter(file)
                        pw.println("blank")
                        pw.close()
                        println "artifact $arti file is changed: file in ${file.path}"
                    } catch(e){
                        println "ERROR: when modifying artifact $arti file: file in ${file.path}"
                        println "  e= $e"
                    }
                }
            }
        }
// */
    }
}
// */

//The task of bintrayUpload depends on publishToMavenLocal set in the previous section.
// This will create maven artifacts when running bintrayUplaod's task.
modifySource.dependsOn publishToMavenLocal
bintrayUpload.dependsOn publishToMavenLocal
bintrayUpload.dependsOn modifySource


/*
========================
Github Package
========================
 */


publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            /** Configure path of your package repository on Github
             *  Replace GITHUB_USERID with your/organisation Github userID and REPOSITORY with the repository name on GitHub
             */
            //this@maven.
            url = uri("https://maven.pkg.github.com/$githubUser/$PKG_REPOSITORY") // Github Package
            credentials {
                //Fetch these details from the properties file or from Environment variables
                username = githubUser //githubProperties.get("gpr.usr") as String? ?: System.getenv("GPR_USER")
                password = githubApiKey //githubProperties.get("gpr.key") as String? ?: System.getenv("GPR_API_KEY")
            }
            //publish = false
        }
    }
}


/*
publish.doFirst {
    publications = publishing.publications.collect {
        it.name
    }.findAll {
        it != "kotlinMultiplatform"
    }
    println("publish.doFirst.publications() $publications")
}
 */

generateMetadataFileForKotlinMultiplatformPublication.enabled = false
generatePomFileForKotlinMultiplatformPublication.enabled = false
publishKotlinMultiplatformPublicationToGitHubPackagesRepository.enabled = false
publishKotlinMultiplatformPublicationToMavenLocal.enabled = false
compileKotlinMetadata.enabled = false

/*
publishJsPublicationToGitHubPackagesRepository.doFirst {
}
 */
/*
publishJvmPublicationToGitHubPackagesRepository.doFirst {
    deleteGithubPkgVersion(publications)
}
 */
/*
publishing.publications.forEach {
    it as MavenPublication
}
 */

//import java.net.URL as URL
task deleteAllPkg {
    doFirst {
        publishing.publications.forEach {
            it.groupId = GROUP_ID
            if (it.name.contains('metadata')) {
                it.artifactId = "${ARTIFACT_ID.toLowerCase()}"
            } else if(it.name == "kotlinMultiplatform") {
                println("afterEvaluate() artifactId= ${it.artifactId}")
                it.artifactId = "${ARTIFACT_ID.toLowerCase()}-kotlin_multiplatform"
            } else {
                println("afterEvaluate() ELSE artifactId= ${it.artifactId}")
                it.artifactId = "${ARTIFACT_ID.toLowerCase()}-${it.name}"
            }
            deleteGithubPkgVersion(it as MavenPublication)
        }
    }
}

def deleteGithubPkgVersion(MavenPublication pub){
    //def urlStr= "https://api.github.com/user/packages/maven/${pub.groupId}.${pub.artifactId}/versions/${pub.version}"
    def urlStr= "https://api.github.com/graphql"
    println("Querying version id $urlStr")
    def conn = new URL(urlStr).openConnection() as HttpURLConnection
    conn.requestMethod = "POST"
    conn.setRequestProperty("Authorization", "bearer $githubApiKey")
    conn.setRequestProperty("Accept", "application/vnd.github.package-deletes-preview+json")
///*
    conn.doOutput= true
    try {
        def PKG_REPOSITORY= 'SidevLib_Private'
        def os = new DataOutputStream(conn.outputStream)
        //def data= "{\"query\":\"mutation { deletePackageVersion(input:{packageVersionId:\\\"${pub.version}\\\"}) { success }}\"}"
        //def data= "{\"query\":\"mutation { deletePackageVersion(input:{packageVersionId:\\\"MDE0OlBhY2thZ2VWZXJzaW9uNzM1Mzg3Nw==\\\"}) { success }}\"}"
        //def data= "{\"query\":\"mutation { deletePackageVersion(input:{packageName:\\\"${pub.groupId}.${pub.artifactId}\\\",packageVersionName:\\\"${pub.version}\\\"}) { success }}\"}"
        //def data= "{\"query\":\"mutation { deletePackageVersion(input:{packageName:\\\"${pub.groupId}.${pub.artifactId}\\\"}) { success }}\"}"
        println("PKG_REPOSITORY= $PKG_REPOSITORY")
        //def data= "{\"query\":\"query{repository(owner:\\\"alfalifr\\\",name:\\\"$PKG_REPOSITORY\\\"){packages(first:10){nodes{packageType,name,id,versions(first:10){nodes{id,version,readme}}}}}}\"}"
        def data= "{\"query\":\"query{repository(owner:\\\"alfalifr\\\",name:\\\"$PKG_REPOSITORY\\\"){packages(last:50){nodes{packageType,name,id,versions(last:50){nodes{id,version,readme}}}}}}\"}"
        os.write(data.getBytes("UTF-8"))
        os.flush()
    } catch(Throwable e){
        println("ERROR $e")
    }
// */
    println("responseCode= ${conn.responseCode} responseMessage= ${conn.responseMessage}")
    def qureyBytes= conn.inputStream.readAllBytes()
    println("queryRes: ========")
    def queryRes= new String(qureyBytes)
    println(queryRes)

    def json= new JsonSlurper().parseText(queryRes)
    //groovy.json.Json
    def nodes= json.data.repository.packages.nodes
    println("nodes= $nodes")
    def vers = nodes.find {
        println("it.name= ${it.name}")
        println("it.name == \"${pub.groupId}.${pub.artifactId}\" => ${it.name == "${pub.groupId}.${pub.artifactId}"}")
        if(it.versions.nodes.size == 0) false
        else {
            it.name == "${pub.groupId}.${pub.artifactId}" &&
                    it.versions.nodes.first().version == pub.version
        }
    }

    if(vers == null) {
        println("${pub.groupId}.${pub.artifactId}:${pub.version} gakda, SKIP!!!")
        return
    }
    def versionId= vers.versions.nodes.first().id

    println("Removing $urlStr ${pub.groupId}.${pub.artifactId}:${pub.version} versionId= $versionId")
    def conn2 = new URL(urlStr).openConnection() as HttpURLConnection
    conn2.requestMethod = "POST"
    conn2.setRequestProperty("Authorization", "bearer $githubApiKey")
    conn2.setRequestProperty("Accept", "application/vnd.github.package-deletes-preview+json")
///*
    conn2.doOutput= true
    try {
        def PKG_REPOSITORY= 'SidevLib_Private'
        def os = new DataOutputStream(conn2.outputStream)
        //def data= "{\"query\":\"mutation { deletePackageVersion(input:{packageVersionId:\\\"${pub.version}\\\"}) { success }}\"}"
        def data= "{\"query\":\"mutation { deletePackageVersion(input:{packageVersionId:\\\"$versionId\\\"}) { success }}\"}"
        //def data= "{\"query\":\"mutation { deletePackageVersion(input:{packageName:\\\"${pub.groupId}.${pub.artifactId}\\\",packageVersionName:\\\"${pub.version}\\\"}) { success }}\"}"
        //def data= "{\"query\":\"mutation { deletePackageVersion(input:{packageName:\\\"${pub.groupId}.${pub.artifactId}\\\"}) { success }}\"}"
        println("PKG_REPOSITORY= $PKG_REPOSITORY")
        //def data= "{\"query\":\"query{repository(owner:\\\"alfalifr\\\",name:\\\"$PKG_REPOSITORY\\\"){packages(first:10){nodes{packageType,name,id,versions(first:10){nodes{id,version,readme}}}}}}\"}"
        //def data= "{\"query\":\"query{repository(owner:\\\"alfalifr\\\",name:\\\"$PKG_REPOSITORY\\\"){packages(last:10){nodes{packageType,name,id,versions(first:10){nodes{id,version,readme}}}}}}\"}"
        os.write(data.getBytes("UTF-8"))
        os.flush()
    } catch(Throwable e){
        println("ERROR $e")
    }
// */
    println("responseCode= ${conn2.responseCode} responseMessage= ${conn2.responseMessage}")
    def removalBytes= conn2.inputStream.readAllBytes()
    println("removalRes: ========")
    def removalRes= new String(removalBytes)
    println(removalRes)

    //`java.net`.URLConnection(url)
}



task reupload {
    doFirst {
        tasks["jsTest"].enabled = false
        tasks["jvmTest"].enabled = false
        tasks["allTests"].enabled = false
        //tasks["jsSourcesJar"].enabled = false
        //tasks["jvmSourcesJar"].enabled = false
        tasks["compileTestKotlinJvm"].enabled = false
        tasks["compileTestKotlinJs"].enabled = false
    }
}

reupload.dependsOn deleteAllPkg
reupload.finalizedBy tasks["build"]
reupload.finalizedBy modifySource
reupload.finalizedBy publish